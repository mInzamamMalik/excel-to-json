'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _object = require('./utils/object');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
contains many enums loaded from multiple excel file. 
each will be from a separated excel sheet

	enums
	{
		enums1: {header, data},
		enums2: {header, data},
		....
	}

*/

var Lookup = function () {
	/*
 @enumsData: loaded from excel files
 */

	function Lookup() {
		var _this = this;

		_classCallCheck(this, Lookup);

		this.enums = {};

		//merge all enumsData into only one

		for (var _len = arguments.length, enumsData = Array(_len), _key = 0; _key < _len; _key++) {
			enumsData[_key] = arguments[_key];
		}

		enumsData.forEach(function (enumData) {
			for (var key in enumData) {
				_this.enums[key] = enumData[key];
			}
		});
	}

	_createClass(Lookup, [{
		key: 'getEnums',
		value: function getEnums() {
			return this.enums;
		}

		/*
  return 
  	enum item
  @key
  	could be a single value or an object	
  */

	}, {
		key: 'lookupValue',
		value: function lookupValue(key, enumName) {
			var theEnum = this.enums[enumName];

			if (theEnum) {
				var enumItems = theEnum.data.filter(function (i) {
					return key instanceof Object ? (0, _object.partOfObject)(key, i) : i.key === key;
				});

				//must match only one enum
				if (enumItems && enumItems.length === 1) return enumItems[0];
			}

			return null;
		}

		/*
  find enum name: if no enum found for @name, then find with value in mapping row
  */

	}, {
		key: 'lookupName',
		value: function lookupName(name, mapColumns) {
			var enumName = mapColumns ? mapColumns[name] || name : name;

			if (this.enums && this.enums[enumName]) return enumName;

			return null;
		}
	}]);

	return Lookup;
}();

module.exports = Lookup;